# =============================================================================
# CounselFlow Ultimate V3 - Continuous Integration Workflow
# =============================================================================

name: 🧪 CI - Test & Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: postgres
  POSTGRES_USER: postgres
  POSTGRES_DB: counselflow_test

jobs:
  # =============================================================================
  # Backend Testing
  # =============================================================================
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: counselflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔧 Set up environment
      working-directory: ./backend
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/counselflow_test" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env

    - name: 🗃️ Set up database
      working-directory: ./backend
      run: |
        # Generate Prisma client
        python -m prisma generate
        # Push database schema
        python -m prisma db push

    - name: 🧪 Run tests
      working-directory: ./backend
      run: |
        python -m pytest --cov=app --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/counselflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: 🔍 Run linting
      working-directory: ./backend
      run: |
        pip install black isort flake8
        black --check .
        isort --check-only .
        flake8 .

  # =============================================================================
  # Frontend Testing
  # =============================================================================
  frontend-tests:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🔧 Set up environment
      working-directory: ./frontend
      run: |
        echo "NEXT_PUBLIC_API_URL=http://localhost:8000" > .env.local
        echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> .env.local

    - name: 🏗️ Build application
      working-directory: ./frontend
      run: npm run build

    - name: 🧪 Run tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

    - name: 🔍 Run linting
      working-directory: ./frontend
      run: |
        npm run lint
        npm run type-check

  # =============================================================================
  # E2E Testing
  # =============================================================================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: counselflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: 📦 Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 📦 Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🎭 Install Playwright
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: 🔧 Set up environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/counselflow_test" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env

    - name: 🗃️ Set up database
      working-directory: ./backend
      run: |
        python -m prisma generate
        python -m prisma db push
        python scripts/seed_comprehensive_data.py --count=10

    - name: 🚀 Start backend
      working-directory: ./backend
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/counselflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci

    - name: 🚀 Start frontend
      working-directory: ./frontend
      run: |
        npm run build
        npm run start &
        sleep 10
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_APP_URL: http://localhost:3000

    - name: 🎭 Run E2E tests
      working-directory: ./frontend
      run: npx playwright test

    - name: 📤 Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 Run Bandit security linter (Python)
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true

    - name: 📤 Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          backend/bandit-report.json

  # =============================================================================
  # Quality Gate
  # =============================================================================
  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan]
    if: always()

    steps:
    - name: 📊 Check job results
      run: |
        echo "Backend tests: ${{ needs.backend-tests.result }}"
        echo "Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "E2E tests: ${{ needs.e2e-tests.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.backend-tests.result }}" == "failure" || 
              "${{ needs.frontend-tests.result }}" == "failure" || 
              "${{ needs.e2e-tests.result }}" == "failure" ]]; then
          echo "❌ Quality gate failed"
          exit 1
        else
          echo "✅ Quality gate passed"
        fi