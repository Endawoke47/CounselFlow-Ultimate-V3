# =============================================================================
# CounselFlow Ultimate V3 - Deployment Workflow
# =============================================================================

name: 🚀 Deploy - Production & Staging

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["🧪 CI - Test & Quality Assurance"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Build and Push Docker Images
  # =============================================================================
  build-images:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Backend Image
    - name: 📋 Extract metadata (Backend)
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: 🏗️ Build and push Backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    # Frontend Image
    - name: 📋 Extract metadata (Frontend)
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: 🏗️ Build and push Frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: 🔐 Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta-backend.outputs.tags }}
        format: spdx-json
        output-file: backend-sbom.spdx.json

    - name: 📤 Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-reports
        path: |
          backend-sbom.spdx.json

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan-images:
    name: 🔒 Security Scan Images
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: 🔍 Run Trivy vulnerability scanner (Backend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-images.outputs.backend-image }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: 🔍 Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-images.outputs.frontend-image }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: '.'

  # =============================================================================
  # Deploy to Staging
  # =============================================================================
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan-images]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: staging
      url: https://staging.counselflow.com

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🚀 Deploy to ECS Staging
      run: |
        # Update ECS task definitions with new image tags
        aws ecs update-service \
          --cluster counselflow-staging \
          --service counselflow-backend-staging \
          --task-definition counselflow-backend-staging \
          --force-new-deployment

        aws ecs update-service \
          --cluster counselflow-staging \
          --service counselflow-frontend-staging \
          --task-definition counselflow-frontend-staging \
          --force-new-deployment

    - name: ⏳ Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster counselflow-staging \
          --services counselflow-backend-staging counselflow-frontend-staging

    - name: 🧪 Run staging health checks
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Health check backend
        curl -f https://staging-api.counselflow.com/health || exit 1
        
        # Health check frontend
        curl -f https://staging.counselflow.com || exit 1

    - name: 📧 Notify staging deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🎭 Staging Deployment ${{ job.status }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Backend: ${{ needs.build-images.outputs.backend-image }}
          Frontend: ${{ needs.build-images.outputs.frontend-image }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # Deploy to Production
  # =============================================================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan-images, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: https://counselflow.com

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🚀 Deploy to ECS Production
      run: |
        # Update ECS task definitions with new image tags
        aws ecs update-service \
          --cluster counselflow-production \
          --service counselflow-backend-production \
          --task-definition counselflow-backend-production \
          --force-new-deployment

        aws ecs update-service \
          --cluster counselflow-production \
          --service counselflow-frontend-production \
          --task-definition counselflow-frontend-production \
          --force-new-deployment

    - name: ⏳ Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster counselflow-production \
          --services counselflow-backend-production counselflow-frontend-production

    - name: 🧪 Run production health checks
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Health check backend
        curl -f https://api.counselflow.com/health || exit 1
        
        # Health check frontend
        curl -f https://counselflow.com || exit 1

    - name: 📊 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: CounselFlow Ultimate V3 ${{ github.ref }}
        body: |
          ## 🚀 CounselFlow Ultimate V3 Release
          
          ### Backend Image
          `${{ needs.build-images.outputs.backend-image }}`
          
          ### Frontend Image  
          `${{ needs.build-images.outputs.frontend-image }}`
          
          ### Security Scanning
          - ✅ Container vulnerability scanning completed
          - ✅ SBOM generated and uploaded
          
          ### Deployment Status
          - ✅ Staging deployment successful
          - ✅ Production deployment successful
          - ✅ Health checks passed
          
          ### What's Included
          - Enterprise-grade AI-powered legal practice management
          - 11 comprehensive legal modules
          - Multi-LLM AI integration (GPT-4, Claude, Gemini)
          - Role-based access control with 17 legal roles
          - CounselFlow professional branding
        draft: false
        prerelease: false

    - name: 📧 Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🏭 Production Deployment ${{ job.status }}
          Version: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Backend: ${{ needs.build-images.outputs.backend-image }}
          Frontend: ${{ needs.build-images.outputs.frontend-image }}
          URL: https://counselflow.com
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # Database Migrations (Production)
  # =============================================================================
  migrate-production:
    name: 🗃️ Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production-db
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install prisma

    - name: 🗃️ Run database migrations
      working-directory: ./backend
      run: |
        python -m prisma migrate deploy
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

    - name: 📧 Notify migration completion
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🗃️ Database Migration ${{ job.status }}
          Version: ${{ github.ref_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # Cleanup
  # =============================================================================
  cleanup:
    name: 🧹 Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 🧹 Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}/backend
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true

    - name: 🧹 Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}/frontend
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true